class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int[] ans = new int[nums.length-k+1];
        Deque<Integer> deque = new LinkedList<>();
        for(int i=0;i<k;i++){
            // if(deque.isEmpty()){
            //     deque.addFirst(i);
            // }
            while(!deque.isEmpty()&&nums[deque.getLast()]<nums[i]){
                deque.removeLast();
            }
            deque.addLast(i);
        }
        int idx=0;
        ans[idx++]=nums[deque.getFirst()];
        for(int i=k;i<nums.length;i++){
            if(deque.peekFirst()+k<=i){
                deque.removeFirst();
            }
            while(!deque.isEmpty() && nums[deque.peekLast()]<nums[i]){
                deque.removeLast();
            }
            deque.addLast(i);
            ans[idx++]=nums[deque.peekFirst()];
        }
        return ans;

    }
}
// class Solution {
//     public int[] maxSlidingWindow(int[] nums, int k) {
//         int[]ans=new int[nums.length-k+1];
//         TreeMap<Integer,Integer> map = new TreeMap();
//         int windowSize=k;
//         for(int i=0;i<k;i++){
//             map.put(nums[i],map.getOrDefault(nums[i],0)+1);
//         }
//         int idx=0;
//         ans[idx++]=map.lastKey();
//         int start=0,end=k;

//         while(end<nums.length){
//             map.put(nums[start],map.get(nums[start])-1);
//             if(map.get(nums[start])==0){
//                 map.remove(nums[start]);
//             }
//             map.put(nums[end],map.getOrDefault(nums[end],0)+1);
//             ans[idx++]=map.lastKey();
//             end++;start++;
//         }
//         return ans;
//     }
// }
